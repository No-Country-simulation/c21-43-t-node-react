{
  "openapi": "3.1.0",
  "info": {
    "title": "Tierra y Arte - E-commerce",
    "description": "Api documentation"
  },
  "externalDocs": {
    "description": "App deploy",
    "url": "https://c21-43-t-node-react-production.up.railway.app/"
  },
  "servers": [
    {
      "url": "https://c21-43-t-node-react-production-227f.up.railway.app/"
    }
  ],
  "tags": [
    {
      "name": "Tierra y arte",
      "description": "E-commerce de productos artesanales"
    },
    {
      "name": "auth",
      "description": "Auth operations"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "product",
      "description": "Products CRUD"
    },
    {
      "name": "category",
      "description": "Categories CRUD"
    },
    {
      "name": "order",
      "description": "Orders CRUD"
    },
    {
      "name": "cart",
      "description": "Cart CRUD"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register new user",
        "description": "Creates a new user and an associated auth record in the database.",
        "operationId": "registerUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "User login",
        "description": "Allows a user to log in by providing email and password. Returns a JWT token for future authenticated requests.",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email/password supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Incorrect password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "User logout",
        "description": "Invalidates the JWT token by adding it to a blacklist.",
        "operationId": "logoutUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid token supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a list of users",
        "description": "This can only be done by a superadmin.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You are not authorized to view this resource."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "This can be done during user registration.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Retrieve a single user by their unique ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Update user by ID",
        "description": "Modify the data of an existing user",
        "operationId": "updateUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "User data to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or user ID"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user by ID",
        "description": "Remove a user by their unique ID",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully deleted"
          },
          "400": {
            "description": "Invalid user ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Returns all store products",
        "description": "Retrieve a list of all products available in the store.",
        "operationId": "getAllProducts",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Create / upload a product",
        "description": "Allows authenticated users to add a new product to the store.",
        "operationId": "createProduct",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Product object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Product successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Bearer token required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find product by ID",
        "description": "Retrieve a product by its ID",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "patch": {
        "tags": [
          "product"
        ],
        "summary": "Update product by ID",
        "description": "Update the details of an existing product",
        "operationId": "updateProduct",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Bearer token required"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "product"
        ],
        "summary": "Delete product by ID",
        "description": "Delete an existing product from the store",
        "operationId": "deleteProduct",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Unauthorized - Bearer token required"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get all categories",
        "description": "Returns a list of all categories in the store",
        "operationId": "getAllCategories",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "category"
        ],
        "summary": "Create a new category",
        "description": "Adds a new category to the store",
        "operationId": "createCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Bearer token required"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get category by ID",
        "description": "Retrieve a single category by its ID",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "patch": {
        "tags": [
          "category"
        ],
        "summary": "Update category by ID",
        "description": "Update an existing category",
        "operationId": "updateCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Bearer token required"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "Delete category by ID",
        "description": "Delete a category from the store",
        "operationId": "deleteCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Unauthorized - Bearer token required"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Bolso de yute"
          },
          "category": {
            "type": "string",
            "format": "uuid",
            "description": "Product category ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Tejido a mano"
          },
          "price": {
            "type": "integer",
            "format": "int32",
            "description": "Price of the product",
            "example": 7000
          },
          "image": {
            "type": "string",
            "description": "URL of the product image",
            "example": "https://http2.mlstatic.com/D_NQ_NP_796331-MLA50990318692_082022-O.webp"
          },
          "stock": {
            "type": "integer",
            "format": "int32",
            "description": "Available stock of the product",
            "example": 7
          }
        },
        "required": [
          "name",
          "category",
          "price",
          "stock"
        ],
        "xml": {
          "name": "Product"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Accesorios"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "example": "Francisco"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "phoneNumber": {
            "type": "string",
            "example": "12345"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "registrationType": {
            "type": "string",
            "description": "User rol",
            "example": "Admin",
            "enum": [
              "Client",
              "Seller",
              "Admin"
            ]
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user.",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "First name of the user.",
            "example": "Francisco"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user.",
            "example": "James"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the user.",
            "example": "12345"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user.",
            "example": "john@email.com"
          },
          "registrationType": {
            "type": "string",
            "description": "Type of registration (e.g., manual, social).",
            "example": "Client"
          },
          "password": {
            "type": "string",
            "description": "Password for the user account.",
            "example": "securePassword123"
          }
        },
        "required": [
          "id",
          "name",
          "lastName",
          "phoneNumber",
          "email",
          "registrationType",
          "password"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address.",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "description": "User's password.",
            "example": "securePassword123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LogoutRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token to be invalidated.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "token"
        ]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for authentication."
          }
        },
        "required": [
          "token"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message detailing the issue."
          },
          "code": {
            "type": "integer",
            "description": "Error code representing the type of error."
          }
        },
        "required": [
          "message",
          "code"
        ]
      }
    },
    "requestBodies": {
      "Product": {
        "description": "Product object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "User": {
        "description": "User object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}